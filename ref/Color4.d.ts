/// <reference path="../src/gl-matrix.d.ts" />
import VectorBase from "./VectorBase";
import Vector4 from "./Vector4";
/**
 * Represents 4-components color.
 */
declare class Color4 extends VectorBase {
    /**
     * Internal use. Do not call this manually.
     */
    static internalParse(color: string, isFirst: boolean, tryParse?: boolean): Color4;
    /**
     * Parse string as Color4
     * @param  {string}  color    Expression of Color4
     * @param  {boolean} tryParse Internal use. Please use undefined always.
     * @return {Color4}           Instance of Color4 generated by the expression.
     */
    static parse(color: string, tryParse?: boolean): Color4;
    /**
    * Returns whether the given 2 values are equal or not.
     * @param  {Color4}  col1 1st value to compare
     * @param  {Color4}  col2 2nd value to compare
     * @return {boolean}      The result
     */
    static equals(col1: Color4, col2: Color4): boolean;
    /**
     * Constructor for Color4.
     * @param  {number} r Red component value clamped in [0,1]
     * @param  {number} g Green component value clamped in [0,1]
     * @param  {number} b Blue component value clamped in [0,1]
     * @param  {number} a Alpha component value clamped in [0,1]
     */
    constructor(r: number, g: number, b: number, a: number);
    /**
     * Red component value clamped in [0,1]
     */
    readonly R: number;
    /**
     * Green component value clamped in [0,1]
     */
    readonly G: number;
    /**
     * Blue component value clamped in [0,1]
     */
    readonly B: number;
    /**
     * Alpha component value clamped in [0,1]
     */
    readonly A: number;
    /**
     * Convert as Vector4 value.
     */
    toVector(): Vector4;
    /**
     * Element count. Always this value is 4.
     * @return {number} [description]
     */
    readonly ElementCount: number;
    /**
     * Compare this instance and the other instance.
     * @param  {Color4}  col the other instance
     * @return {boolean}     the result
     */
    equalWith(col: Color4): boolean;
    /**
     * Convert color4 to string expression
     */
    toString(): string;
    /**
     * Convert color4 to string expression. This is more human readable expression than toString().
     */
    toDisplayString(): string;
}
export default Color4;
